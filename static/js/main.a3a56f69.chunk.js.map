{"version":3,"sources":["Components/CustomContainer/CustomContainer.tsx","Components/NetflixLogo.tsx","Components/Landing/step1.svg","Components/Landing/step3.svg","Components/Landing/Landing.tsx","utils/shareApi.ts","Components/PosterTopX/top5.jpg","Components/PosterTopX/PosterTopX.tsx","consts.ts","utils/parseCsvData.ts","utils/processCsvData.ts","utils/indexOfMultiple.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["props","className","children","NetflixLogo","id","viewBox","fill","d","Landing","state","status","uploadFile","e","preventDefault","setState","file","target","files","reader","FileReader","onload","content","result","fileContentCallback","toString","onerror","err","readAsText","getModal","Modal","show","length","Header","Title","this","CustomContainer","icon","faComments","faInfoCircle","src","step1","alt","href","rel","faLink","step3","htmlFor","faCloudUploadAlt","type","onChange","accept","hidden","React","Component","blob","a","navigator","share","console","log","error","EXPECTED_IMAGE_DIMENSIONS","window","devicePixelRatio","PosterTopX","canvas","ctx","imgRef","createRef","componentDidUpdate","align","imgSrc","titles","year","backgroundImage","posterImage","width","height","save","drawImage","getBackgroundImage","backgroundImageSrc","getPosterImage","Math","min","font","fillStyle","fillText","slice","forEach","t","i","restore","current","toDataURL","memoize","img","Image","setAttribute","download","document","createElement","click","toBlob","shareApi","showShare","onClick","faShare","undefined","getContext","forceUpdate","ref","faDownload","SERVER_URL","location","protocol","YEAR","parseCsvData","data","parsedData","csvParse","rows","rawRow","push","Date","topNodeId","processCsvData","titleYearMap","Map","multiplier","row","getFullYear","has","set","serie","movie","yearData","get","index","string","searchStrings","indexOf","indexOfMultiple","typeKey","nameKey","count","titleMap","title","titleData","titleCount","updateTitleData","App","csvData","errors","topXData","processData","getTopXData","serieData","Array","from","sort","b","size","map","getImgSrcFromTitle","fetch","then","response","json","results","backdrop_path","catch","renderContent","body","getReader","decoder","TextDecoder","read","decode","value","Error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a3a56f69.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport \"./customContainer.scss\"\r\n\r\ntype Props = {\r\n  children: any,\r\n}\r\n\r\nexport default (props:Props) => {\r\n  return (\r\n    <div className=\"customContainer\">\r\n      <div className=\"customContainerContent\">\r\n        {props.children}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function NetflixLogo() {\r\n  return (\r\n    <svg id=\"netflixLogo\" viewBox=\"0 0 111 30\"><g><path fill=\"#e50914\" d=\"M105.06233,14.2806261 L110.999156,30 C109.249227,29.7497422 107.500234,29.4366857 105.718437,29.1554972 L102.374168,20.4686475 L98.9371075,28.4375293 C97.2499766,28.1563408 95.5928391,28.061674 93.9057081,27.8432843 L99.9372012,14.0931671 L94.4680851,-5.68434189e-14 L99.5313525,-5.68434189e-14 L102.593495,7.87421502 L105.874965,-5.68434189e-14 L110.999156,-5.68434189e-14 L105.06233,14.2806261 Z M90.4686475,-5.68434189e-14 L85.8749649,-5.68434189e-14 L85.8749649,27.2499766 C87.3746368,27.3437061 88.9371075,27.4055675 90.4686475,27.5930265 L90.4686475,-5.68434189e-14 Z M81.9055207,26.93692 C77.7186241,26.6557316 73.5307901,26.4064111 69.250164,26.3117443 L69.250164,-5.68434189e-14 L73.9366389,-5.68434189e-14 L73.9366389,21.8745899 C76.6248008,21.9373887 79.3120255,22.1557784 81.9055207,22.2804387 L81.9055207,26.93692 Z M64.2496954,10.6561065 L64.2496954,15.3435186 L57.8442216,15.3435186 L57.8442216,25.9996251 L53.2186709,25.9996251 L53.2186709,-5.68434189e-14 L66.3436123,-5.68434189e-14 L66.3436123,4.68741213 L57.8442216,4.68741213 L57.8442216,10.6561065 L64.2496954,10.6561065 Z M45.3435186,4.68741213 L45.3435186,26.2498828 C43.7810479,26.2498828 42.1876465,26.2498828 40.6561065,26.3117443 L40.6561065,4.68741213 L35.8121661,4.68741213 L35.8121661,-5.68434189e-14 L50.2183897,-5.68434189e-14 L50.2183897,4.68741213 L45.3435186,4.68741213 Z M30.749836,15.5928391 C28.687787,15.5928391 26.2498828,15.5928391 24.4999531,15.6875059 L24.4999531,22.6562939 C27.2499766,22.4678976 30,22.2495079 32.7809542,22.1557784 L32.7809542,26.6557316 L19.812541,27.6876933 L19.812541,-5.68434189e-14 L32.7809542,-5.68434189e-14 L32.7809542,4.68741213 L24.4999531,4.68741213 L24.4999531,10.9991564 C26.3126816,10.9991564 29.0936358,10.9054269 30.749836,10.9054269 L30.749836,15.5928391 Z M4.78114163,12.9684132 L4.78114163,29.3429562 C3.09401069,29.5313525 1.59340144,29.7497422 0,30 L0,-5.68434189e-14 L4.4690224,-5.68434189e-14 L10.562377,17.0315868 L10.562377,-5.68434189e-14 L15.2497891,-5.68434189e-14 L15.2497891,28.061674 C13.5935889,28.3437998 11.906458,28.4375293 10.1246602,28.6868498 L4.78114163,12.9684132 Z\" id=\"Fill-14\"></path></g></svg>\r\n  )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/step1.abd23c8c.svg\";","export default __webpack_public_path__ + \"static/media/step3.f82e6f03.svg\";","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faComments, faInfoCircle, faLink, faCloudUploadAlt } from '@fortawesome/free-solid-svg-icons'\r\nimport CustomContainer from 'Components/CustomContainer/CustomContainer'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport NetflixLogo from 'Components/NetflixLogo'\r\nimport step1 from './step1.svg'\r\nimport step3 from './step3.svg'\r\nimport \"./landing.scss\"\r\n\r\ntype Props = {\r\n  fileContentCallback: (content:string) => any,\r\n}\r\n\r\ninterface State {\r\n  status: string,\r\n}\r\n\r\nexport default class Landing extends React.Component<Props,State> {\r\n  state = {\r\n    status: \"\",\r\n  }\r\n\r\n  uploadFile = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    e.preventDefault()\r\n    this.setState({\r\n      status: \"hahah...\"\r\n    })\r\n    const file = e.target.files?.[0]\r\n    if(file) {\r\n      const reader = new FileReader()\r\n      reader.onload = (e) => {\r\n        const content = e?.target?.result\r\n        if(content) {\r\n          this.props.fileContentCallback(content.toString())\r\n        }\r\n      }\r\n      reader.onerror = (err) => {\r\n        this.setState({\r\n          status: err.toString(),\r\n        })\r\n      }\r\n      reader.readAsText(file)\r\n      this.setState({\r\n        status: \"Loading...\"\r\n      })\r\n    }\r\n  }\r\n\r\n  getModal = () => {\r\n    return (\r\n      <Modal show={this.state.status.length > 0}>\r\n        <Modal.Header>\r\n          <Modal.Title>{this.state.status}</Modal.Title>\r\n        </Modal.Header>\r\n      </Modal>\r\n    )\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"landing\">\r\n        {this.getModal()}\r\n\r\n        <CustomContainer>\r\n          <header>\r\n            <div className=\"navIconContainer\">\r\n              <div className=\"navIcon\">\r\n                <FontAwesomeIcon icon={faComments}/>\r\n              </div>\r\n              <div>Feedback</div>\r\n              <div>Survey</div>\r\n            </div>\r\n            <NetflixLogo/>\r\n            <div className=\"navIconContainer\">\r\n              <div className=\"navIcon\">\r\n                <FontAwesomeIcon icon={faInfoCircle}/>\r\n              </div>\r\n              <div>Design &</div>\r\n              <div>Development</div>\r\n            </div>\r\n          </header>\r\n\r\n          <section>\r\n            <p><b>By Matthew Lau & Harry Li</b></p>\r\n            <p>Description in progress</p>\r\n          </section>\r\n\r\n          <section>\r\n            images\r\n          </section>\r\n\r\n          <section id=\"instructions\">\r\n            <p>INSTRUCTIONS:</p>\r\n\r\n            <div className=\"stepContainer\">\r\n              <div className=\"stepContent\">\r\n                <div className=\"stepTitle\">1. LOG IN TO NETFLIX</div>\r\n                <p>If you are using a shared account, make sure you are logged into your specific profile</p>\r\n              </div>\r\n\r\n              <div className=\"stepIcon\"><img src={step1} alt=\"step 1\"/></div>\r\n            </div>\r\n\r\n            <div className=\"stepContainer\">\r\n              <div className=\"stepContent\">\r\n                <div className=\"stepTitle\">2. CLICK HERE</div>\r\n                <p>Links to official Netflix Viewing Activity log <a href=\"https:///www.netflix.com/viewingactivity\" target=\"_blank\" rel=\"noopener noreferrer\">https:///www.netflix.com/viewingactivity</a></p>\r\n              </div>\r\n\r\n              <div className=\"stepIcon\">\r\n                <a href=\"https:///www.netflix.com/viewingactivity\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                  <div id=\"step2IconContainer\">\r\n                    <div id=\"step2Icon\"><FontAwesomeIcon icon={faLink}/></div>\r\n                    <div>Netflix viewing</div>\r\n                    <div>activity URL</div>\r\n                  </div>\r\n                </a>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"stepContainer\">\r\n              <div className=\"stepContent\">\r\n                <div className=\"stepTitle\">3. Click \"Download all\"</div>\r\n                <p>Scroll all the way to the bottom of the page and click on \"Download All\"</p>\r\n              </div>\r\n\r\n              <div className=\"stepIcon\"><img src={step3} alt=\"step 3\"/></div>\r\n            </div>\r\n\r\n            <div className=\"stepContainer\">\r\n              <div className=\"stepContent\">\r\n                <div className=\"stepTitle\">4. UPLOAD .CSV FILE HERE</div>\r\n              </div>\r\n\r\n              <div className=\"stepIcon\"></div>\r\n            </div>\r\n          </section>\r\n\r\n          <section>\r\n            <div id=\"uploadFileContainer\">\r\n              <label id=\"fileUploadButton\" htmlFor=\"fileUpload\">\r\n                Tap to Upload <FontAwesomeIcon icon={faCloudUploadAlt}/>\r\n              </label>\r\n              <input id=\"fileUpload\" type=\"file\" onChange={this.uploadFile} accept=\".csv\" hidden/>\r\n            </div>\r\n          </section>\r\n        </CustomContainer>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","export default async function shareApi(blob:Blob) {\r\n  try {\r\n    // @ts-ignore\r\n    const result = await navigator.share({ files: [blob] })\r\n    console.log(\"Share Successful\")\r\n    return true\r\n  }\r\n  catch(err) {\r\n    console.error(err)\r\n  }\r\n\r\n  return false\r\n}\r\n","export default __webpack_public_path__ + \"static/media/top5.6ba5dd6b.jpg\";","import React from 'react'\r\nimport memoize from 'memoize-one'\r\nimport CustomContainer from 'Components/CustomContainer/CustomContainer'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faDownload, faShare } from '@fortawesome/free-solid-svg-icons'\r\nimport shareApi from \"utils/shareApi\"\r\nimport backgroundImageSrc from \"./top5.jpg\"\r\nimport \"./posterTopX.scss\"\r\n\r\nconst DPR = window.devicePixelRatio\r\n\r\nexport type PosterTopXRequiredProps = {\r\n  align: string,\r\n  imgSrc: string,\r\n  titles: string[],\r\n  year: number,\r\n}\r\n\r\nexport type Props = PosterTopXRequiredProps\r\n\r\ninterface State {\r\n  backgroundImage: {height:number, width:number},\r\n  posterImage: {height:number, width:number},\r\n  showShare: boolean,\r\n}\r\n\r\n\r\nconst EXPECTED_IMAGE_DIMENSIONS = {\r\n  height: 952,\r\n  width: 998,\r\n}\r\n\r\nexport default class PosterTopX extends React.Component<Props,State> {\r\n  canvas: HTMLCanvasElement\r\n  ctx: CanvasRenderingContext2D | null\r\n  imgRef: React.RefObject<HTMLImageElement> = React.createRef()\r\n\r\n  constructor(props:Props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      backgroundImage: {height:0, width:0},\r\n      posterImage: {height:0, width:0},\r\n      showShare: navigator.share !== undefined,\r\n    }\r\n\r\n    this.canvas = document.createElement('canvas')\r\n    this.ctx = this.canvas.getContext('2d')\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.forceUpdate()\r\n  }\r\n\r\n  componentDidUpdate = () => {\r\n    const {\r\n      align,\r\n      imgSrc,\r\n      titles,\r\n      year,\r\n    } = this.props\r\n\r\n    const {\r\n      backgroundImage,\r\n      posterImage,\r\n    } = this.state\r\n\r\n    const ctx = this.ctx\r\n    if(ctx) {\r\n      this.canvas.width = backgroundImage.width\r\n      this.canvas.height = backgroundImage.height\r\n\r\n      ctx.save()\r\n      // ctx.scale(DPR, DPR)\r\n\r\n      ctx.drawImage(this.getBackgroundImage(backgroundImageSrc), 0, 0)\r\n\r\n      //crop a square from the image\r\n      ctx.drawImage(\r\n        this.getPosterImage(imgSrc),\r\n        (\r\n          align === \"center\"\r\n          ? (posterImage.width - posterImage.height) / 2\r\n          : posterImage.width - posterImage.height\r\n        ),\r\n        0,\r\n        Math.min(posterImage.width, posterImage.height),\r\n        Math.min(posterImage.width, posterImage.height),\r\n        0,\r\n        225,\r\n        EXPECTED_IMAGE_DIMENSIONS.width,\r\n        EXPECTED_IMAGE_DIMENSIONS.height,\r\n      )\r\n\r\n      ctx.font = '120px Bebas Neue'\r\n      ctx.fillStyle = \"white\";\r\n      ctx.fillText(this.props.titles[0], this.state.backgroundImage.width/3 - 100, this.state.backgroundImage.height*2/3 + 50)\r\n\r\n      ctx.font = '80px Bebas Neue'\r\n      titles.slice(1).forEach((t,i) => {\r\n        if(ctx) {\r\n          ctx.fillText(t, this.state.backgroundImage.width/3 - 100, this.state.backgroundImage.height*2/3 + 175 + 89*i)\r\n        }\r\n      })\r\n\r\n      ctx.restore()\r\n\r\n      if(this.imgRef.current) {\r\n        this.imgRef.current.src = this.canvas.toDataURL(\"image/png\")\r\n      }\r\n    }\r\n  }\r\n\r\n  getBackgroundImage = memoize(\r\n    (imgSrc: string) => {\r\n      const img = new Image()\r\n      img.src = imgSrc\r\n      img.setAttribute('crossorigin', 'anonymous')\r\n      img.onload = () => this.setState({\r\n        backgroundImage: {height: img.height, width: img.width}\r\n      })\r\n\r\n      return img\r\n    }\r\n  )\r\n\r\n  getPosterImage = memoize(\r\n    (imgSrc: string) => {\r\n      const img = new Image()\r\n      img.src = imgSrc\r\n      img.setAttribute('crossorigin', 'anonymous')\r\n      img.onload = () => this.setState({\r\n        posterImage: {height: img.height, width: img.width}\r\n      })\r\n\r\n      return img\r\n    }\r\n  )\r\n\r\n  download = () => {\r\n    const a = document.createElement(\"a\")\r\n    a.href = this.canvas.toDataURL(\"image/png\")\r\n    a.download = \"Netflix_Year_In_Review_Top_5.png\"\r\n    a.click()\r\n  }\r\n\r\n  share = () => {\r\n    this.canvas.toBlob((blob) => {\r\n      if(blob) {\r\n        shareApi(blob)\r\n        // const dumb = async () => {\r\n        //   if(await shareApi(blob) === false) {\r\n        //     this.setState({showShare: true})\r\n        //   }\r\n        // }\r\n        //\r\n        // dumb()\r\n      }\r\n    })\r\n  }\r\n\r\n  showShare = () => {\r\n    if(this.state.showShare) {\r\n      return (\r\n        <button onClick={e => this.share()}>\r\n          <FontAwesomeIcon icon={faShare}/> Share\r\n        </button>\r\n      )\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <CustomContainer>\r\n        <div className=\"poster\">\r\n            <img ref={this.imgRef} alt=\"Loading...\"/>\r\n\r\n            <br/>\r\n\r\n            <div>\r\n              <button onClick={e => this.download()}><FontAwesomeIcon icon={faDownload}/> Save Image</button>\r\n              {this.showShare()}\r\n            </div>\r\n        </div>\r\n      </CustomContainer>\r\n    )\r\n  }\r\n}\r\n","export const SERVER_URL = window.location.protocol + \"//\" + (process.env.REACT_APP_SERVER_DOMAIN || \"localhost:5000\")\r\nexport const TOP_X = 5\r\nexport const YEAR = 2020\r\n","import { csvParse } from \"d3\"\r\n\r\nexport type CsvDataType = {\r\n  Date: Date,\r\n  Title: string,\r\n  topNodeId: string,\r\n}\r\n\r\nexport default function parseCsvData(data:string):CsvDataType[] {\r\n  if(data) {\r\n    const parsedData = csvParse(data)\r\n    const rows: CsvDataType[] = []\r\n    for(let i=0; i<parsedData.length; ++i) {\r\n      const rawRow = parsedData[i]\r\n      // @ts-ignore\r\n      rows.push({\r\n        ...rawRow,\r\n        Date: new Date(rawRow.Date || new Date()),\r\n        topNodeId: \"\", //to be filled in later\r\n      })\r\n    }\r\n\r\n    return rows\r\n  }\r\n  else {\r\n    console.error(\"No Data\")\r\n  }\r\n\r\n  return []\r\n}\r\n","import indexOfMultiple from \"utils/indexOfMultiple\"\r\nimport { CsvDataType } from \"utils/parseCsvData\"\r\n\r\ntype NameDataType = {count: number, titles: Map<string, number>}\r\ntype NameMapType = Map<string,NameDataType>\r\nexport type TitleYearMapType = Map<number, {\r\n  [typeKey:string]: NameMapType,\r\n}>\r\n\r\nexport default function processCsvData(rows: CsvDataType[]) {\r\n  const titleYearMap:TitleYearMapType = new Map()\r\n\r\n  let multiplier = 1\r\n\r\n  //for each row\r\n  rows.forEach(row => {\r\n    const year = row.Date.getFullYear() //get the year\r\n    if(!titleYearMap.has(year)) { //if we are encountering this year for the first time\r\n      titleYearMap.set(year, { //initialize a value in the map for this year\r\n        serie: new Map<string,NameDataType>(),\r\n        movie: new Map<string,NameDataType>(),\r\n      })\r\n    }\r\n\r\n    const yearData = titleYearMap.get(year) //get the value for this year\r\n    if(yearData) { //keep typescript happy\r\n      //try to determine if this is a tv series\r\n      const index = indexOfMultiple(\r\n        row.Title,\r\n        [\": Season\",\": Volume\",\": Series\",\": Collection\"], //see if the title contains any of these substrings\r\n      )\r\n\r\n      const typeKey = index === -1 ? \"movie\" : \"serie\"\r\n      const nameKey = index === -1 ? row.Title : row.Title.slice(0, index) //this could be a movie name or tv show name\r\n      if(yearData[typeKey]) { //keep typescript happy\r\n        if(!yearData[typeKey].has(nameKey)) { //if we are encountering this name for the first time\r\n          multiplier = 1\r\n          yearData[typeKey].set(nameKey, { //initialize a value\r\n            count: 0,\r\n            titles: new Map<string, number>(),\r\n          })\r\n        }\r\n        else {\r\n          multiplier *= 1.1\r\n        }\r\n\r\n        const titleMap = yearData[typeKey].get(nameKey)\r\n        updateTitleData(multiplier, row.Title, titleMap)\r\n      }\r\n    }\r\n  })\r\n\r\n  return titleYearMap\r\n}\r\n\r\nfunction updateTitleData(\r\n  multiplier: number,\r\n  title: string,\r\n  titleData?: NameDataType,\r\n) {\r\n  if(titleData) { //keep typescript happy\r\n    const titleCount = titleData.titles.get(title)\r\n    if(titleCount === undefined) { //if we're seeing this title for the first time\r\n      titleData.titles.set(title, 1)\r\n      titleData.count += multiplier\r\n    }\r\n    else { //else we've seen this title before\r\n      titleData.titles.set(title, titleCount + 1)\r\n      titleData.count += multiplier * 1.5 //repeated viewings count for more\r\n    }\r\n  }\r\n}\r\n","/**\r\n * given a string and an array of search strings\r\n * return the index of the first valid search string\r\n * @param  string        string to search in\r\n * @param  searchStrings array of search strings\r\n * @return               the index of the first valid search string, else -1 if none of them are in the string\r\n */\r\nexport default function indexOfMultiple(string:string, searchStrings: string[]) {\r\n  for(let i=0; i<searchStrings.length; ++i) {\r\n    const index = string.indexOf(searchStrings[i])\r\n    if(index !== -1) {\r\n      return index\r\n    }\r\n  }\r\n\r\n  return -1\r\n}\r\n","import React from 'react'\r\nimport memoize from 'memoize-one'\r\nimport Landing from 'Components/Landing/Landing'\r\nimport PosterTopX, { PosterTopXRequiredProps } from 'Components/PosterTopX/PosterTopX'\r\nimport { SERVER_URL, TOP_X, YEAR } from \"consts\"\r\nimport parseCsvData, { CsvDataType } from \"utils/parseCsvData\"\r\nimport processCsvData, { TitleYearMapType } from \"utils/processCsvData\"\r\nimport './App.scss'\r\n\r\nexport type TVSeriesType = {\r\n  \"@context\": string,\r\n  \"@type\": string,\r\n  actors: {\r\n    \"@type\": string,\r\n    name: string,\r\n  }[],\r\n  awards: string,\r\n  contentRating: string,\r\n  creator: {\r\n    \"@type\": string,\r\n    name: string,\r\n  }[],\r\n  dateCreated: string,\r\n  description: string,\r\n  director: {\r\n    \"@type\": string,\r\n    name: string,\r\n  }[],\r\n  genre: string,\r\n  image: string,\r\n  name: string,\r\n  numberOfSeasons: number,\r\n  startDate: string,\r\n  url: string,\r\n}\r\n\r\ninterface State {\r\n  csvData: CsvDataType[],\r\n  errors: string[],\r\n  status: string,\r\n  titleYearMap: TitleYearMapType,\r\n  topXData: PosterTopXRequiredProps,\r\n}\r\n\r\nclass App extends React.Component<{},State> {\r\n  state:State = {\r\n    csvData: [],\r\n    errors: [],\r\n    status: \"\",\r\n    titleYearMap: new Map(),\r\n    topXData: { align: \"\", imgSrc: \"\", titles: [], year: 0 }\r\n  }\r\n\r\n  componentDidMount() {\r\n    if(process.env.NODE_ENV === \"development\") {\r\n      this.fetchCsv()\r\n    }\r\n    fetch(`${SERVER_URL}/`)\r\n  }\r\n\r\n\r\n  fetchCsv() {\r\n    fetch('/example.csv').then((response) => {\r\n      if(response && response.body) {\r\n        const reader = response.body.getReader()\r\n        const decoder = new TextDecoder('utf-8')\r\n\r\n        return reader.read().then(\r\n          (result) => decoder.decode(result.value)\r\n        )\r\n      }\r\n      else {\r\n        throw new Error(\"No response or body\")\r\n      }\r\n    }).then(parseCsvData).then(this.processData).catch(err => console.error(err))\r\n  }\r\n\r\n  processData = async (rows:CsvDataType[]) => {\r\n    console.log(rows)\r\n    const titleYearMap = processCsvData(rows)\r\n\r\n    const yearData = titleYearMap.get(YEAR)\r\n    console.log(yearData)\r\n    if(yearData) {\r\n      this.setState({\r\n        csvData: rows,\r\n        titleYearMap,\r\n      })\r\n      this.getTopXData(titleYearMap, YEAR)\r\n    }\r\n  }\r\n\r\n  getTopXData = memoize(\r\n    async (titleYearMap: TitleYearMapType, year: number) => {\r\n      const data = titleYearMap.get(year)\r\n      if(data) {\r\n        const serieData = Array.from(data.serie).sort(\r\n          (a, b) => {\r\n            if(a[1].titles.size > b[1].titles.size) return -1\r\n            return 1\r\n          }\r\n        )\r\n\r\n        const titles = serieData.slice(0, TOP_X).map(d => d[0])\r\n        this.setState({\r\n          topXData: {\r\n            ...await this.getImgSrcFromTitle(titles[0]),\r\n            titles,\r\n            year: YEAR,\r\n          }\r\n        })\r\n      }\r\n    }\r\n  )\r\n\r\n  getImgSrcFromTitle = memoize(\r\n    async (title:string) => {\r\n      // try {\r\n      //   //try to get the top node id\r\n      //   const topNodeId = parseInt(\r\n      //     await fetch(`${SERVER_URL}/topNodeIdFromTitle/${title}`).then(response => response.text())\r\n      //   )\r\n      //\r\n      //   //if the top node id is valid\r\n      //   if(!isNaN(topNodeId)) {\r\n      //     const data:TVSeriesType = await fetch(`${SERVER_URL}/title/${topNodeId}`).then(response => response.json())\r\n      //     return {\r\n      //       align: \"right\",\r\n      //       imgSrc: data.image,\r\n      //     }\r\n      //   }\r\n      //   else {\r\n      //     throw new Error(`No top node id returned for ${title}`)\r\n      //   }\r\n      // }\r\n      // catch(err) { //if there was some error, move on to the next title in the array\r\n      //   console.error(err)\r\n      // }\r\n\r\n\r\n      try {\r\n        const data = await fetch(`${SERVER_URL}/tmdbInfo/${title}`).then(response => response.json())\r\n        console.log(data)\r\n        const imgSrc = `https://image.tmdb.org/t/p/original/${data.results[0].backdrop_path}`\r\n        console.log(imgSrc)\r\n        return {\r\n          align: \"center\",\r\n          imgSrc,\r\n        }\r\n      }\r\n      catch(err) {\r\n        console.error(err)\r\n      }\r\n\r\n      //we didn't find any valid images\r\n      return {align:\"\",imgSrc:\"\"}\r\n    }\r\n  )\r\n\r\n  fileContentCallback = (content:string) => {\r\n    this.processData(parseCsvData(content)).catch(console.error)\r\n  }\r\n\r\n\r\n  renderContent = () => {\r\n    if(this.state.topXData.imgSrc) {\r\n      return (\r\n        <div>\r\n          <PosterTopX\r\n            {...this.state.topXData}\r\n          />\r\n        </div>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <Landing\r\n        fileContentCallback={this.fileContentCallback}\r\n      />\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        {this.renderContent()}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}